package dz.minagri.stat.customer.entity;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import dz.minagri.stat.customer.enumeration.ExploitantStatus;
import dz.minagri.stat.customer.enumeration.Gender;
import dz.minagri.stat.location.entity.Address;
import dz.minagri.stat.location.entity.Exploit;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
@Entity(
        name = "exploitant"
)
public class Exploitant implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Long id;
    @Version
    private int version;
    private String numS12;
    private String firstname;
    private String lastname;

    @OneToMany(
            cascade = CascadeType.ALL,
            orphanRemoval = true,
            fetch = FetchType.LAZY)
    @JsonIgnore
    private List<Exploit> exploits = new ArrayList<>();

    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private Gender gender;

    private String nationalNumber;

    //    @JsonIgnore
    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name = "cartefellah_id", nullable = true)
    private CarteFellah carteFellah;

    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "addresse_id", nullable = true)
    private Address address;

    @Column(name = "birthday", columnDefinition = "DATE")
    private LocalDate birthday;

    @Column(name = "registration_date", columnDefinition = "DATE")
    private LocalDate registrationDate;

    @Column
    @Enumerated(EnumType.STRING)
    private ExploitantStatus exploitantStatus;

    public void addExploit(Exploit exploit) {
        exploits.add(exploit);
        exploit.setExploitant(this);
    }

}
