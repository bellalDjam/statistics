package dz.minagri.stat.customer.service;

import dz.minagri.stat.customer.entity.CarteFellah;
import dz.minagri.stat.customer.entity.Exploitant;
import dz.minagri.stat.customer.enumeration.ExploitantStatus;
import dz.minagri.stat.customer.enumeration.Gender;
import dz.minagri.stat.customer.repository.ExploitantRepository;
import dz.minagri.stat.location.entity.Address;
import dz.minagri.stat.location.entity.Exploit;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;
import java.util.Objects;

@Service
@AllArgsConstructor
@Transactional
@Slf4j
public class ExploitantService {
    private final ExploitantRepository exploitantRepository;
    private final CarteFellahService carteFellahService;

    public Exploitant save(String numS12,
                           String firstname,
                           String lastname,
                           LocalDate birthday,
                           Gender gender,
                           String nationalNumber,
                           ExploitantStatus exploitantStatus,
                           LocalDate registrationDate,
                           Address address,
                           CarteFellah carteFellah,
                           List<Exploit> exploits) {
        if (carteFellahService.registredS12CarteFellah(numS12) == false) {
            Exploitant explt = new Exploitant();
            explt.setNumS12(numS12);
            explt.setFirstname(firstname);
            explt.setLastname(lastname);
            explt.setBirthday(birthday);
            explt.setGender(gender);
            explt.setNationalNumber(nationalNumber);
            explt.setExploitantStatus(exploitantStatus);
            explt.setRegistrationDate(registrationDate);
            explt.setAddress(address);
            explt.setCarteFellah(carteFellah);
            explt.setExploits(exploits);

            return exploitantRepository.save(explt);
        } else {

            CarteFellah carteFellah1 = carteFellahService.getByS12(numS12);
            log.info("Inside updateExploitantservice method of Exploitant.carteFellah1" + birthday);
            Exploitant explt1 = new Exploitant();
            explt1.setNumS12(numS12);
            explt1.setFirstname(firstname);
            explt1.setLastname(lastname);
            explt1.setBirthday(birthday);
            explt1.setGender(gender);
            explt1.setNationalNumber(nationalNumber);
            explt1.setExploitantStatus(exploitantStatus);
            explt1.setRegistrationDate(registrationDate);
            explt1.setAddress(address);
            explt1.setCarteFellah(carteFellah1);
            explt1.setExploits(exploits);
            return exploitantRepository.save(explt1);
        }
    }

    public Exploitant findExploitantById(Long id) {
        return exploitantRepository
                .findById(id)
                .orElseThrow(() -> new IllegalArgumentException("carteFellah with id " + id + "does not exist"));
    }

    public Collection<Exploitant> List(int limit) {
        return exploitantRepository
                .findAll(PageRequest
                        .of(0, limit))
                .getContent();
    }

    //TODO manage the returned value in case of null
    public CarteFellah findExploitantCarteFellah(Long id) {
        // reteive Exploitant the carteFellah if exist
        Exploitant exploitant = exploitantRepository
                .findById(id)
                .orElseThrow(() -> new IllegalArgumentException("carteFellah with id " + id + "does not exist"));
        if (exploitantIsHoldingCartFellah(id) == true) {
            return exploitant.getCarteFellah();
        } else {
            return null;
        }
    }

    public boolean exploitantIsHoldingCartFellah(Long id) {
        Exploitant exploitant = exploitantRepository
                .findById(id)
                .orElseThrow(() -> new IllegalArgumentException("carteFellah with id " + id + "does not exist"));
        if (exploitant.getCarteFellah() != null) {
            return true;
        } else return false;
    }

    public Exploitant updateExploitant(Long id, String numS12,
                                       String firstname,
                                       String lastname,
                                       LocalDate birthday,
                                       Gender gender,
                                       String nationalNumber,
                                       ExploitantStatus exploitantStatus,
                                       LocalDate registrationDate,
                                       Address address,
                                       CarteFellah carteFellah,
                                       List<Exploit> exploits) {
        if (carteFellahService.registredS12CarteFellah(numS12) == false) {
            Exploitant explt = findExploitantById(id);
            if (numS12 != null &&
                    numS12.length() > 0 &&
                    !Objects.equals(explt.getNumS12(), numS12)) {
                explt.setNumS12(numS12);
                log.info("Inside updateExploitantservice method of Exploitant.numS12" + numS12);
            }
            if (firstname != null &&
                    firstname.length() > 0 &&
                    !Objects.equals(explt.getFirstname(), firstname)) {
                explt.setFirstname(firstname);
                log.info("Inside updateExploitantservice method of Exploitant.setFirstname" + firstname);
            }
            if (lastname != null &&
                    lastname.length() > 0 &&
                    !Objects.equals(explt.getLastname(), lastname)) {
                explt.setLastname(lastname);
                log.info("Inside updateExploitantservice method of Exploitant.setLastname" + lastname);
            }
            if (birthday != null &&
                    !Objects.equals(explt.getBirthday(), birthday)) {
                explt.setBirthday(birthday);
                log.info("Inside updateExploitantservice method of Exploitant.setBirthday" + birthday);
            }
            explt.setBirthday(birthday);
            explt.setGender(gender);
            explt.setNationalNumber(nationalNumber);
            explt.setExploitantStatus(exploitantStatus);
            explt.setRegistrationDate(registrationDate);
            explt.setAddress(address);
            explt.setCarteFellah(carteFellah);
            explt.setExploits(exploits);

            return exploitantRepository.save(explt);
        } else {
            Exploitant explt = findExploitantById(id);
            CarteFellah carteFellah1 = carteFellahService.getByS12(numS12);
            explt.setLastname(lastname);
            explt.setFirstname(firstname);
            explt.setNumS12(numS12);
            explt.setBirthday(birthday);
            explt.setGender(gender);
            explt.setNationalNumber(nationalNumber);
            explt.setExploitantStatus(exploitantStatus);
            explt.setRegistrationDate(registrationDate);
            explt.setAddress(address);
            explt.setCarteFellah(carteFellah1);
            explt.setExploits(exploits);
            return exploitantRepository.save(explt);
        }
    }
}
