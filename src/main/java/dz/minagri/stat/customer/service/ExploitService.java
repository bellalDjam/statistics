package dz.minagri.stat.customer.service;

import dz.minagri.stat.customer.entity.Exploitant;
import dz.minagri.stat.customer.enumeration.ExploitStatus;
import dz.minagri.stat.location.entity.Exploit;
import dz.minagri.stat.location.entity.Exploitation;
import dz.minagri.stat.location.repository.ExploitRepository;
import dz.minagri.stat.location.service.ExploitationService;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.Collection;

@Service
@AllArgsConstructor
@Transactional
@Slf4j
public class ExploitService {

    private final ExploitRepository exploitRepository;
    private final ExploitantService exploitantService;
    private final ExploitationService exploitationService;

    public Exploit save(Long exploitationID, Long exploitantID, LocalDate registrationDate, LocalDate activitiesStartDate,
                        LocalDate activitiesEndDate, ExploitStatus exploitStatus, String description) {
        boolean isValidExploit;
        if (isValidExploit = true) {
            Exploit exploit = Exploit.builder()
                    .exploitation(exploitationService.findExploitationById(exploitationID))
                    .exploitant(exploitantService.findExploitantById(exploitantID))
                    .registrationDate(registrationDate)
                    .activitiesStartDate(activitiesStartDate)
                    .activitiesEndDate(activitiesEndDate)
                    .exploitStatus(exploitStatus)
                    .description(description)
                    .build();
            return exploitRepository.save(exploit);
        }
        return null;
    }

    public boolean isValidExploit(Long exploitationID, Long exploitantID) {
        Exploitant exploitant = exploitantService.findExploitantById(exploitantID);
        Exploitation exploitation = exploitationService.findExploitationById(exploitationID);
        boolean validExploit = (exploitation != null && exploitation != null) ? true : false;
        return validExploit;
    }

    public Exploit findExploitById(Long id) {
        return exploitRepository.findById(id).orElseThrow(() -> new RuntimeException("exploit with id " + id + "does not exist"));
    }

    public Collection<Exploit> List(int limit) {
        log.info("fetching all ExploitServices:{}");
        return exploitRepository.findAll(PageRequest.of(0, limit)).getContent();
    }

    public Exploit updateExploit(Long id, LocalDate registrationDate, LocalDate activitiesStartDate,
                                 LocalDate activitiesEndDate, ExploitStatus exploitStatus, String description) {
        Exploit exploit = findExploitById(id);
        exploit.setRegistrationDate(registrationDate);
        exploit.setActivitiesStartDate(activitiesStartDate);
        exploit.setActivitiesEndDate(activitiesEndDate);
        exploit.setExploitStatus(exploitStatus);
        exploit.setDescription(description);
        return exploitRepository.save(exploit);
    }
}
