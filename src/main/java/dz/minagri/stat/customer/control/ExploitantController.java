package dz.minagri.stat.customer.control;

import dz.minagri.stat.customer.entity.CarteFellah;
import dz.minagri.stat.customer.entity.Exploitant;
import dz.minagri.stat.customer.enumeration.ExploitantStatus;
import dz.minagri.stat.customer.enumeration.Gender;
import dz.minagri.stat.customer.service.CarteFellahService;
import dz.minagri.stat.customer.service.ExploitantService;
import dz.minagri.stat.location.entity.Address;
import dz.minagri.stat.location.entity.Exploit;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;

@RestController
@RequestMapping("/exploitant")
@AllArgsConstructor
@Slf4j
public class ExploitantController {
    private final ExploitantService exploitantService;
    private final CarteFellahService caretFellahService;

    @PostMapping("")
    //TODO Find and identify the Personne By S12, NationalNumber if carteFellah existe.
    public Exploitant saveExploitant(@RequestParam String numS12,
                                     String firstname,
                                     String lastname,
                                     LocalDate birthday,
                                     Gender gender,
                                     String nationalNumber,
                                     ExploitantStatus exploitantStatus,
                                     LocalDate registrationDate,
                                     @RequestParam(required = false) Address address,
                                     @RequestParam(required = false) CarteFellah carteFellah,
                                     @RequestParam(required = false) List<Exploit> exploits
    ) {
        log.info("Inside saveExploitant method of ExploitantController");
        return exploitantService
                .save(numS12, firstname, lastname, birthday, gender, nationalNumber, exploitantStatus,
                        registrationDate, address, carteFellah, exploits);
    }

    @PutMapping("/{id}")
    public Exploitant updateExploitant(@PathVariable("id") Long id,
                                       @RequestParam String numS12,
                                       String firstname,
                                       String lastname,
                                       LocalDate birthday,
                                       Gender gender,
                                       String nationalNumber,
                                       ExploitantStatus exploitantStatus,
                                       LocalDate registrationDate,
                                       @RequestParam(required = false) Address address,
                                       @RequestParam(required = false) CarteFellah carteFellah,
                                       @RequestParam(required = false) List<Exploit> exploits
    ) {
        Exploitant exploitant = exploitantService.findExploitantById(id);
        return exploitantService.updateExploitant(id, numS12, firstname, lastname, birthday, gender, nationalNumber, exploitantStatus,
                registrationDate, address, carteFellah, exploits);

    }

    @GetMapping("/{id}")
    public Exploitant findExploitantById(@PathVariable("id") Long Id) {
        log.info("Inside findExploitantById method of ExploitantController");
        return exploitantService
                .findExploitantById(Id);
    }

    @GetMapping("list/{limit}")
    public Collection<Exploitant> getExploitant(@PathVariable("limit") int limit) {
        log.info("Inside List method of ExploitantController");
        return exploitantService
                .List(limit);
    }

    @GetMapping("/{id}/fellahRegistred")
    public CarteFellah exploitantFellahRegistred(@PathVariable("id") Long Id) {
        log.info("Inside WilayafellahRegistredList method exploitantFellahRegistred of ExploitantController");
        return exploitantService.findExploitantCarteFellah(Id);
    }
}
