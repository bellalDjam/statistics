package dz.minagri.stat.location.control;

import dz.minagri.stat.customer.enumeration.ExploitStatus;
import dz.minagri.stat.customer.service.CarteFellahService;
import dz.minagri.stat.customer.service.ExploitService;
import dz.minagri.stat.location.entity.Exploit;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.Collection;

@RestController
@RequestMapping("/exploit")
@AllArgsConstructor
@Slf4j
public class ExploitController {
    private final ExploitService exploitService;
    private final CarteFellahService caretFellahService;

    @PostMapping("")

    public Exploit saveExploit(@RequestParam Long exploitationID, Long exploitantID,
                               LocalDate registrationDate, LocalDate activitiesStartDate,
                               @RequestParam(required = false) LocalDate activitiesEndDate,
                               @RequestParam(required = false) ExploitStatus exploitStatus,
                               @RequestParam(required = false) String description
    ) {
        log.info("Inside saveExploit method of ExploitController");
        return exploitService.save(exploitationID, exploitantID, registrationDate, activitiesStartDate, activitiesEndDate, exploitStatus, description);
    }

    @PutMapping("/{id}")
    public Exploit updateExploit(@PathVariable("id") Long id,
                                 @RequestParam(required = false) LocalDate registrationDate,
                                 @RequestParam(required = false) LocalDate activitiesStartDate,
                                 @RequestParam(required = false) LocalDate activitiesEndDate,
                                 @RequestParam(required = false) ExploitStatus exploitStatus,
                                 @RequestParam(required = false) String description
    ) {
        return exploitService.updateExploit(id, registrationDate, activitiesStartDate,
                activitiesEndDate, exploitStatus, description);

    }

    /**
     * @PostMapping("/{id}/update") public Optional<Zone> updateZone(@PathVariable("id") Long zoneId){
     * log.info("Inside updateZone method of ZoneController");
     * Zone zone = zoneService.findZoneById(zoneId).get();
     * return zoneService.save(zone);
     * <p>
     * }
     */
    //TODO Find and identify by zones
    @GetMapping("/{id}")
    public Exploit findExploitById(@PathVariable("id") Long Id) {
        log.info("Inside findExploitById method of ExploitController");
        return exploitService
                .findExploitById(Id);
    }

    @GetMapping("list/{limit}")
    public Collection<Exploit> getExploit(@PathVariable("limit") int limit) {
        log.info("Inside List method of ExploitController");
        return exploitService
                .List(limit);
    }

}
