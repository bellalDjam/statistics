package dz.minagri.stat.location.service;

import dz.minagri.stat.location.entity.Exploitation;
import dz.minagri.stat.location.entity.Zone;
import dz.minagri.stat.location.repository.ExploitationRepository;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.Collection;
import java.util.Objects;

@Service
@AllArgsConstructor
@Transactional
@Slf4j
public class ExploitationService {

    private final ExploitationRepository exploitationRepository;
    private final ZoneService zoneService;

    public Collection<Exploitation> List(int limit) {
        log.info("fetching all ExploitationServices:{}");
        return exploitationRepository.findAll(PageRequest.of(0, limit)).getContent();

    }

    //TODO Add Check creation date can't be in the future with error message to display
    @Transactional
    public Exploitation save(String expolitationName,
                             String surface, String lieuDit,
                             Long zoneID, LocalDate registrationDate,
                             String description) {
        Zone zone = zoneService.findZoneById(zoneID);
        Exploitation exploitation = Exploitation.builder()
                .expolitationName(expolitationName)
                .surface(surface)
                .lieuDit(lieuDit)
                .zone(zone)
                .registrationDate(registrationDate)
                .description(description)
                .build();
        log.info("Save Exploitation inside exploitationServices:{}");
        return exploitationRepository.save(exploitation);
    }


    public Exploitation findExploitationById(Long exploitationId) {
        log.info("findById inside  exploitationServices:{}" + exploitationId);
        return exploitationRepository.findById(exploitationId).orElseThrow(() -> new IllegalArgumentException("exploitation with id " + exploitationId + "does not exist"));
    }

    public Exploitation updateExplotation(Long exploitationId, String expolitationName
            , String surface, String lieuDit, LocalDate registrationDate
            , Long zoneID, String description) {
        Zone zone = zoneService.findZoneById(zoneID);
        Exploitation exlpoitation = exploitationRepository.findById(exploitationId).orElseThrow(() -> new IllegalArgumentException("exploitation with id " + exploitationId + "does not exist"));
        if (expolitationName != null &&
                expolitationName.length() > 0 &&
                !Objects.equals(exlpoitation.getExpolitationName(), expolitationName)) {
            exlpoitation.setExpolitationName(expolitationName);
            log.info("update expolitationName Exploitation inside exploitationServices:{}");
        }
        if (surface != null &&
                surface.length() > 0 &&
                !Objects.equals(exlpoitation.getSurface(), surface)) {
            exlpoitation.setSurface(surface);
            log.info("update surface Exploitation inside exploitationServices:{}");
        }
        if (lieuDit != null &&
                lieuDit.length() > 0 &&
                !Objects.equals(exlpoitation.getLieuDit(), lieuDit)) {
            exlpoitation.setLieuDit(lieuDit);
            log.info("update lieuDit Exploitation inside exploitationServices:{}");
        }
        if (registrationDate != null &&
                !Objects.equals(exlpoitation.getRegistrationDate(), registrationDate)) {
            exlpoitation.setRegistrationDate(registrationDate);
            log.info("update registrationDate Exploitation inside exploitationServices:{}");
        }
        if (zoneID != null &&
                !Objects.equals(exlpoitation.getZone().getId(), zoneID)) {
            exlpoitation.setZone(zone);
            log.info("update zone Exploitation inside exploitationServices:{}");
        }
        if (description != null &&
                description.length() > 0 &&
                !Objects.equals(exlpoitation.getDescription(), description)) {
            exlpoitation.setDescription(description);
            log.info("update registrationDate Exploitation inside exploitationServices:{}");
        }
        return exploitationRepository.save(exlpoitation);
    }
}
